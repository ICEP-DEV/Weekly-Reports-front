import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var DomController = /** @class */ (function () {
    function DomController() {
    }
    /**
     * Schedules a task to run during the READ phase of the next frame.
     * This task should only read the DOM, but never modify it.
     */
    DomController.prototype.read = function (cb) {
        getQueue().read(cb);
    };
    /**
     * Schedules a task to run during the WRITE phase of the next frame.
     * This task should write the DOM, but never READ it.
     */
    DomController.prototype.write = function (cb) {
        getQueue().write(cb);
    };
    DomController.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DomController_Factory() { return new DomController(); }, token: DomController, providedIn: "root" });
DomController.ɵfac = function DomController_Factory(t) { return new (t || DomController)(); };
DomController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DomController, factory: function (t) { return DomController.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DomController, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return DomController;
}());
export { DomController };
var getQueue = function () {
    var win = typeof window !== 'undefined' ? window : null;
    if (win != null) {
        var Ionic = win.Ionic;
        if (Ionic && Ionic.queue) {
            return Ionic.queue;
        }
        return {
            read: function (cb) { return win.requestAnimationFrame(cb); },
            write: function (cb) { return win.requestAnimationFrame(cb); }
        };
    }
    return {
        read: function (cb) { return cb(); },
        write: function (cb) { return cb(); }
    };
};
var ɵ0 = getQueue;
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VzIjpbIkBpb25pYy9hbmd1bGFyL3Byb3ZpZGVycy9kb20tY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQzs7QUFHQTtBQUdjLElBSGQ7QUFBNEIsS0FpQjNCO0FBRUQsSUFqQkU7QUFDRDtBQUNHO0FBRUgsT0FESTtBQUNKLElBQUMsNEJBQUksR0FBSixVQUFLLEVBQWU7QUFDckIsUUFBRyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkIsSUFBQyxDQUFDO0FBRUYsSUFBQztBQUNEO0FBQ0c7QUFFSCxPQURJO0FBQ0osSUFBQyw2QkFBSyxHQUFMLFVBQU0sRUFBZTtBQUN0QixRQUFHLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixJQUFDLENBQUM7QUFFSDtLQWxCYSxhQUFhLGlDQUh6QixVQUFVLENBQUMsZUFDVixVQUFVLEVBQUU7QUFBTSxZQUNuQixDQUFDLFNBQ1csYUFBYSxDQWlCekI7Ozs7OztnREFDRDtBQUNDLHdCQXhCRDtBQUFHLENBc0JGLEFBakJELElBaUJDO0FBRUQsU0FuQmEsYUFBYTtBQW1CMUIsSUFBTSxRQUFRLEdBQUc7QUFDVixJQUFMLElBQU0sR0FBRyxHQUFHLE9BQVEsTUFBYyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFXLENBQUM7QUFFNUUsSUFBRSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7QUFDbEIsUUFBRyxJQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQzNCLFFBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtBQUM3QixZQUFLLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztBQUN4QixTQUFJO0FBRUwsUUFBSSxPQUFPO0FBQ1YsWUFBSyxJQUFJLEVBQUUsVUFBQyxFQUFPLElBQUssT0FBQSxHQUFHLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLEVBQTdCLENBQTZCO0FBQ3JELFlBQUssS0FBSyxFQUFFLFVBQUMsRUFBTyxJQUFLLE9BQUEsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxFQUE3QixDQUE2QjtBQUN0RCxTQUFJLENBQUM7QUFDTCxLQUFFO0FBRUgsSUFBRSxPQUFPO0FBQ1IsUUFBRyxJQUFJLEVBQUUsVUFBQyxFQUFPLElBQUssT0FBQSxFQUFFLEVBQUUsRUFBSixDQUFJO0FBQzFCLFFBQUcsS0FBSyxFQUFFLFVBQUMsRUFBTyxJQUFLLE9BQUEsRUFBRSxFQUFFLEVBQUosQ0FBSTtBQUMzQixLQUFFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7QUE3Q0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFpQkEsQUFmQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFoQkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFpQkEsQUF0QkEsQUFzQkEsQUFqQkEsQUFpQkEsQUFqQkEsQUFBQSxBQW1CQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEb21Db250cm9sbGVyIHtcblxuICAvKipcbiAgICogU2NoZWR1bGVzIGEgdGFzayB0byBydW4gZHVyaW5nIHRoZSBSRUFEIHBoYXNlIG9mIHRoZSBuZXh0IGZyYW1lLlxuICAgKiBUaGlzIHRhc2sgc2hvdWxkIG9ubHkgcmVhZCB0aGUgRE9NLCBidXQgbmV2ZXIgbW9kaWZ5IGl0LlxuICAgKi9cbiAgcmVhZChjYjogUmFmQ2FsbGJhY2spIHtcbiAgICBnZXRRdWV1ZSgpLnJlYWQoY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlcyBhIHRhc2sgdG8gcnVuIGR1cmluZyB0aGUgV1JJVEUgcGhhc2Ugb2YgdGhlIG5leHQgZnJhbWUuXG4gICAqIFRoaXMgdGFzayBzaG91bGQgd3JpdGUgdGhlIERPTSwgYnV0IG5ldmVyIFJFQUQgaXQuXG4gICAqL1xuICB3cml0ZShjYjogUmFmQ2FsbGJhY2spIHtcbiAgICBnZXRRdWV1ZSgpLndyaXRlKGNiKTtcbiAgfVxufVxuXG5jb25zdCBnZXRRdWV1ZSA9ICgpID0+IHtcbiAgY29uc3Qgd2luID0gdHlwZW9mICh3aW5kb3cgYXMgYW55KSAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBudWxsIGFzIGFueTtcblxuICBpZiAod2luICE9IG51bGwpIHtcbiAgICBjb25zdCBJb25pYyA9IHdpbi5Jb25pYztcbiAgICBpZiAoSW9uaWMgJiYgSW9uaWMucXVldWUpIHtcbiAgICAgIHJldHVybiBJb25pYy5xdWV1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVhZDogKGNiOiBhbnkpID0+IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpLFxuICAgICAgd3JpdGU6IChjYjogYW55KSA9PiB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlYWQ6IChjYjogYW55KSA9PiBjYigpLFxuICAgIHdyaXRlOiAoY2I6IGFueSkgPT4gY2IoKVxuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgUmFmQ2FsbGJhY2sgPSAodGltZVN0YW1wPzogbnVtYmVyKSA9PiB2b2lkO1xuIl19