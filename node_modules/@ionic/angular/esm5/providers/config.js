import * as tslib_1 from "tslib";
import { Injectable, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var Config = /** @class */ (function () {
    function Config() {
    }
    Config.prototype.get = function (key, fallback) {
        var c = getConfig();
        if (c) {
            return c.get(key, fallback);
        }
        return null;
    };
    Config.prototype.getBoolean = function (key, fallback) {
        var c = getConfig();
        if (c) {
            return c.getBoolean(key, fallback);
        }
        return false;
    };
    Config.prototype.getNumber = function (key, fallback) {
        var c = getConfig();
        if (c) {
            return c.getNumber(key, fallback);
        }
        return 0;
    };
    Config.prototype.set = function (key, value) {
        console.warn("[DEPRECATION][Config]: The Config.set() method is deprecated and will be removed in Ionic Framework 6.0. Please see https://ionicframework.com/docs/angular/config for alternatives.");
        var c = getConfig();
        if (c) {
            c.set(key, value);
        }
    };
    Config.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Config_Factory() { return new Config(); }, token: Config, providedIn: "root" });
Config.ɵfac = function Config_Factory(t) { return new (t || Config)(); };
Config.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Config, factory: function (t) { return Config.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Config, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return Config;
}());
export { Config };
export var ConfigToken = new InjectionToken('USERCONFIG');
var getConfig = function () {
    if (typeof window !== 'undefined') {
        var Ionic = window.Ionic;
        if (Ionic && Ionic.config) {
            return Ionic.config;
        }
    }
    return null;
};
var ɵ0 = getConfig;
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlcyI6WyJAaW9uaWMvYW5ndWxhci9wcm92aWRlcnMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRDs7QUFPRDtBQUVvQixJQUZwQjtBQUFxQixLQWlDcEI7QUFFRCxJQWpDRSxvQkFBRyxHQUFILFVBQUksR0FBc0IsRUFBRSxRQUFjO0FBQUssUUFDN0MsSUFBTSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDekIsUUFBRyxJQUFJLENBQUMsRUFBRTtBQUNWLFlBQUssT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqQyxTQUFJO0FBQ0osUUFBRyxPQUFPLElBQUksQ0FBQztBQUNmLElBQUMsQ0FBQztBQUVGLElBQUMsMkJBQVUsR0FBVixVQUFXLEdBQXNCLEVBQUUsUUFBa0I7QUFBSyxRQUN4RCxJQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUN6QixRQUFHLElBQUksQ0FBQyxFQUFFO0FBQ1YsWUFBSyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hDLFNBQUk7QUFDSixRQUFHLE9BQU8sS0FBSyxDQUFDO0FBQ2hCLElBQUMsQ0FBQztBQUVGLElBQUMsMEJBQVMsR0FBVCxVQUFVLEdBQXNCLEVBQUUsUUFBaUI7QUFBSyxRQUN0RCxJQUFNLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUN6QixRQUFHLElBQUksQ0FBQyxFQUFFO0FBQ1YsWUFBSyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLFNBQUk7QUFDSixRQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQ1osSUFBQyxDQUFDO0FBRUYsSUFBQyxvQkFBRyxHQUFILFVBQUksR0FBc0IsRUFBRSxLQUFXO0FBQ3hDLFFBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxzTEFBc0wsQ0FBQyxDQUFDO0FBQ3hNLFFBQUcsSUFBTSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDekIsUUFBRyxJQUFJLENBQUMsRUFBRTtBQUNWLFlBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkIsU0FBSTtBQUNKLElBQUMsQ0FBQztBQUVIO0tBbENhLE1BQU0saUNBSGxCLFVBQVUsQ0FBQyxlQUNWO01BQVUsRUFBRSxNQUFNLFdBQ25CLENBQUMsU0FDVyxNQUFNLENBaUNsQjs7Ozs7O2dEQUNEO0FBQ0MsaUJBM0NEO0FBQUcsQ0F5Q0YsQUFqQ0QsSUFpQ0M7QUFFRCxTQW5DYSxNQUFNO0FBbUNuQixNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQU0sWUFBWSxDQUFDLENBQUM7QUFFakUsSUFBTSxTQUFTLEdBQUc7QUFBZSxJQUMvQixJQUFJLE9BQVEsTUFBYyxLQUFLLFdBQVcsRUFBRTtBQUM3QyxRQUFHLElBQU0sS0FBSyxHQUFJLE1BQTZCLENBQUMsS0FBSyxDQUFDO0FBQ3RELFFBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUM5QixZQUFLLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUN6QixTQUFJO0FBQ0osS0FBRTtBQUNGLElBQUMsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFDRDs7QUF0REEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBaUNBLEFBL0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQWhDQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWlDQSxBQXpDQSxBQXlDQSxBQWpDQSxBQWlDQSxBQWpDQSxBQUFBLEFBbUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcgYXMgQ29yZUNvbmZpZywgSW9uaWNDb25maWcgfSBmcm9tICdAaW9uaWMvY29yZSc7XG5cbmltcG9ydCB7IElvbmljV2luZG93IH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XG5cbiAgZ2V0KGtleToga2V5b2YgSW9uaWNDb25maWcsIGZhbGxiYWNrPzogYW55KTogYW55IHtcbiAgICBjb25zdCBjID0gZ2V0Q29uZmlnKCk7XG4gICAgaWYgKGMpIHtcbiAgICAgIHJldHVybiBjLmdldChrZXksIGZhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRCb29sZWFuKGtleToga2V5b2YgSW9uaWNDb25maWcsIGZhbGxiYWNrPzogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGMgPSBnZXRDb25maWcoKTtcbiAgICBpZiAoYykge1xuICAgICAgcmV0dXJuIGMuZ2V0Qm9vbGVhbihrZXksIGZhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0TnVtYmVyKGtleToga2V5b2YgSW9uaWNDb25maWcsIGZhbGxiYWNrPzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBjID0gZ2V0Q29uZmlnKCk7XG4gICAgaWYgKGMpIHtcbiAgICAgIHJldHVybiBjLmdldE51bWJlcihrZXksIGZhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBzZXQoa2V5OiBrZXlvZiBJb25pY0NvbmZpZywgdmFsdWU/OiBhbnkpIHtcbiAgICBjb25zb2xlLndhcm4oYFtERVBSRUNBVElPTl1bQ29uZmlnXTogVGhlIENvbmZpZy5zZXQoKSBtZXRob2QgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIElvbmljIEZyYW1ld29yayA2LjAuIFBsZWFzZSBzZWUgaHR0cHM6Ly9pb25pY2ZyYW1ld29yay5jb20vZG9jcy9hbmd1bGFyL2NvbmZpZyBmb3IgYWx0ZXJuYXRpdmVzLmApO1xuICAgIGNvbnN0IGMgPSBnZXRDb25maWcoKTtcbiAgICBpZiAoYykge1xuICAgICAgYy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb25maWdUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxhbnk+KCdVU0VSQ09ORklHJyk7XG5cbmNvbnN0IGdldENvbmZpZyA9ICgpOiBDb3JlQ29uZmlnIHwgbnVsbCA9PiB7XG4gIGlmICh0eXBlb2YgKHdpbmRvdyBhcyBhbnkpICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IElvbmljID0gKHdpbmRvdyBhcyBhbnkgYXMgSW9uaWNXaW5kb3cpLklvbmljO1xuICAgIGlmIChJb25pYyAmJiBJb25pYy5jb25maWcpIHtcbiAgICAgIHJldHVybiBJb25pYy5jb25maWc7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiJdfQ==